what is container 
container is made of layers of images stacked on each other mostly linux bease image cos of their small size
What is the Image and Container
Image is the actual Package the artifact that can be moved around 
Container is the actually the application contains environment 
what is the differnce between docker and vm
vm has os applications layer and os Kernel
docker has os application layer and uses the host os kernel which make the size is smaller than vm and mush faster 
Docker Architecture
----> Docker Engine 
------> Server (Pulling Images,Managing Images & containers)
--------> Container Runtime (Pulling Images,Managing Container Lifecycle)
--------> volumes (Persisting Data)
--------> Network (Configuring Network for container communication)
--------> Build Images (Build Own Docker Images)
------> API (Interacting with docker server)
------> CLI (Command line interface client to execute docker commands)

-docker pull <image_name>
docker pull redis
-docker images 
check all exiting images
each image has name,tag (the version of the image), and id
-docker run <image_name>
start new container from specific image 
-docker run -d <image_name OR ID> 
running the container in detach mode and return the container id 
-docker run <image_name:version>
this will pull the image if not exit with spceific version and run
-docker stop <container_id>
stop docker container
-docker start <container_name>
start docker container
-docker ps 
list of all running containers
-docker ps -a
list all the container running or not running 
-----> Port Binding
docker run -p <servies_port(pc port)>:<port_binding_to(image port)> <image_name>
docker run -p 6000:6379 redis 
this will bind redis post 6379 to 6000 port on the host pc
-----> Debug
docker logs <container_id>
docker logs <container_name>
docker run --name <name_of_container> <image_name>
create a new container with specific name from an image
docker exec -it <container_id OR container_name> bash
get inside specific container 
the differnce between docker run and docker start is the docker run is creating container from the image but start is starting the container with configuration added in 
start for example when u bind port in run u dont need to binded again with start cos it happend alleady 

-----> Docker networkd
docker network is isolated network we connect to it from outside using localhost
to make container avalible for eachother or connect to each other we use or create shared network between them which require only container name to connect to each other
-docker network inspect <network_name>
-docker network ls 
list all avalible docker networks
-docker network create <network_name>
create docker network
-docker network connect <network_name> <container_name>
connect network to container
-docker network disconnect <network_name> <container_name>
disconnect network from container
-docker network prune 
remove all unused networks
-docker network rm <network_name>
remove network

-----> example of running mongo db with port ,network env variable
-docker run mongo -p 27017:27017 -d --network mongo-network --name mongodb -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=admin 
here we are running docker image mongo and makeing container out of it on port 27017 with custom network and container name mongodb with env varaible usename and password admin